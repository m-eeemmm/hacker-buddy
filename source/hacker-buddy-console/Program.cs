
// This file was auto-generated by ML.NET Model Builder. 

using hacker_buddy_camera;
using Hacker_buddy_ml_model;
using OpenCvSharp;
using OpenCvSharp.Extensions;
using System;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;

namespace LandUse_Console
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Using model to make single prediction -- Comparing actual Label with predicted Label from sample data...");
            Console.WriteLine("Press 'q' to quit\n\n");

            ConsoleKey result = ConsoleKey.Spacebar;
            BufferBlock<Bitmap> buffer = new BufferBlock<Bitmap>();
            Camera cam = new Camera(buffer);
            EmotionObserver obs = new EmotionObserver(buffer);
            do
            {
                Console.WriteLine("Press any key to make a guess");
                //Thread.Sleep(5000);
                result = Console.ReadKey().Key;
                cam.TakePhotoAsync();
                obs.RunAsync();
                //var bitmap = cam.TakePhoto();
                //var imagePath = cam.SavePhote(bitmap);
                //MakeAGuess(imagePath);
            } while (result != ConsoleKey.Q);
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }


        static void MakeAGuess(string imagePath)
        {
            // Create single instance of sample data from first line of dataset for model input
            //string imagePath = GetSnapshot().Result;

            MLModel1.ModelInput sampleData = new MLModel1.ModelInput()
            {
                ImageSource = imagePath,
            };

                // Make a single prediction on the sample data and print results
                var predictionResult = MLModel1.Predict(sampleData);

            Console.WriteLine($"ImageSource: {imagePath}\n");
            Console.Write($"\nPredicted Label value: ");
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"{predictionResult.Prediction}");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine($"Predicted Label scores:");
            for (int i = 0; i < predictionResult.ClassificationLabels.Length; i++)
            {
                if (predictionResult.Score[i] >= 0.3)
                    Console.ForegroundColor = ConsoleColor.Cyan;
                if (predictionResult.Score[i] >= 0.5)
                    Console.ForegroundColor = ConsoleColor.Green;
                if (predictionResult.Score[i] < 0.3)
                    Console.ForegroundColor = ConsoleColor.White;
                Console.WriteLine($"\t[{predictionResult.ClassificationLabels[i]}|{Math.Round((decimal)predictionResult.Score[i], 1)}]");
            }
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine("\n\n");
        }

        static async Task<string> GetSnapshot()
        {
            using var capture = new VideoCapture(0, VideoCaptureAPIs.DSHOW);
            if (!capture.IsOpened())
                return null;

            capture.FrameWidth = 1920;
            capture.FrameHeight = 1280;
            capture.AutoFocus = true;

            const int sleepTime = 10;

            var window = new Window("capture");
            //var image = new Mat();

            //while (true)
            //{
            //    capture.Read(image);
            //    if (image.Empty())
            //        break;

            //    window.ShowImage(image);
            //    int c = Cv2.WaitKey(sleepTime);
            //    if (c >= 0)
            //    {
            //        break;
            //    }
            //}

            Bitmap bitmap;
            var image = new Mat();

            if (capture.IsOpened())
            {
                capture.Read(image);
                // window.ShowImage(image);
                bitmap = BitmapConverter.ToBitmap(image);
                string folder = @".\samplepics";
                if (!Directory.Exists(folder))
                    Directory.CreateDirectory(folder);
                string path = Path.Combine(folder, $"{Guid.NewGuid()}.jpg");
                bitmap.Save(path, System.Drawing.Imaging.ImageFormat.Jpeg);
                return path;
            }

            return null;


            //CameraCaptureUI captureUI = new CameraCaptureUI();
            //captureUI.PhotoSettings.Format = CameraCaptureUIPhotoFormat.Jpeg;
            //captureUI.PhotoSettings.CroppedSizeInPixels = new Size(200, 200);

            //StorageFile photo = await captureUI.CaptureFileAsync(CameraCaptureUIMode.Photo);

            //if (photo == null)
            //{
            //    // User cancelled photo capture
            //    return null;
            //}

            //StorageFolder destinationFolder =
            //    await ApplicationData.Current.LocalFolder.CreateFolderAsync("ProfilePhotoFolder", CreationCollisionOption.OpenIfExists);

            //await photo.CopyAsync(destinationFolder, "Test.jpg", NameCollisionOption.ReplaceExisting);
            //return photo.Path;
            //await photo.DeleteAsync();
        }
    }
}
